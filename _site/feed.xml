<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en-GB" /><updated>2019-10-20T11:29:34+01:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Gabriel’s Blog</title><subtitle>Sharing my thoughts about IT related subjects</subtitle><author><name>Gabriel Felipe Soares</name></author><entry><title type="html">Product Lines and Product Families</title><link href="http://0.0.0.0:4000/software-architecture/2019/10/20/product-lines-and-product-families/" rel="alternate" type="text/html" title="Product Lines and Product Families" /><published>2019-10-20T00:00:00+01:00</published><updated>2019-10-20T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/10/20/product-lines-and-product-families</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/10/20/product-lines-and-product-families/">&lt;p&gt;Producing software has costs that can be reduced with code reusability. Lets talk about how the creation of “Product Lines” can help you achieve this.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;According to the book &lt;a href=&quot;https://www.goodreads.com/book/show/1434086.Software_Product_Lines_in_Action&quot;&gt;Software Product Lines in Action&lt;/a&gt; by &lt;em&gt;Frank J. van der Linden&lt;/em&gt;. To discover the product lines we must separate the features that stay the same, from the features that change by each product.&lt;/p&gt;

&lt;p&gt;We can do this through the classification of three groups feature’s groups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Commonalities&lt;/strong&gt;: &lt;em&gt;Product line&lt;/em&gt; features that stay the same for all the products. For instance: The UI components, Hardware Drivers, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Variations&lt;/strong&gt;: &lt;em&gt;Product line&lt;/em&gt; features that vary within products. iPad and iPhone camera software.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Product-Specifics&lt;/strong&gt;: Specific features &lt;em&gt;for one and only one&lt;/em&gt; product.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To apply the product lines classification on the architecture and Software Development lifecycle, it is common to create different teams and change the organization structure.&lt;/p&gt;

&lt;p&gt;There will be 2 different teams that can vary according to size of product, commonalities and variations.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Domain Team&lt;/strong&gt;: Responsible to maintain the commonalities and variations. They are constantly in contact with application teams when new features need to be released and define if the scope is product specific or not.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Application Team&lt;/strong&gt;: Responsible to develop new Product Specific features and integrate variations and commonalities into their products.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/product-lines-team-organization.png&quot; alt=&quot;Product Lines Team Organization&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Product Lines Team Organization&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Of course, there are some trade-offs by using this approach. There will be needed an &lt;em&gt;extra upfront investment&lt;/em&gt; to adapt your architecture and code base to support reusable code. The creation of &lt;strong&gt;commonalities&lt;/strong&gt;, like libraries, definition of boundaries, communications standards and protocols within components among others must be planned and done in advance.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/product-lines-tradeoffs.png&quot; alt=&quot;Product Lines&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Product Lines&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;It might does not fit for all sort of projects. If you have a small project that has a short life time and no plans to scale, may not worth to invest time on creating &lt;strong&gt;commonalities&lt;/strong&gt;. But companies that want to build a consolidated product must think about this.&lt;/p&gt;

&lt;h2 id=&quot;benefits-of-product-lines&quot;&gt;Benefits of Product Lines&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reducing costs&lt;/strong&gt; to maintain and create new products. Since great part of the codebase is shared, more products will benefit from it.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;More resources&lt;/strong&gt; can be spent on other qualities attributes of a product, such as testing, security, reliability, etc.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;User experience&lt;/strong&gt;: As the products share UI libraries, the end-user will have low learning curve to use different products. This is an strategy used for Apple, where users from iPad, iPhone, iMac are already familiar with the software. It is really important to engage users on companies products.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Time-to-Market&lt;/strong&gt;: If the company decides to create a new product tomorrow, they can utilize existent software have a shorter delivery time, since most of the softwares components are already made.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;The creation of product lines is really important to reduce costs and give competitive advantage for the company. Even if it implies in a higher initial development cost, it will bring lots of benefits in short period. As a Software Architect you must identify the situations where it worth invest time by planning Product Lines, since it does not fit for all types of projects.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">Producing software has costs that can be reduced with code reusability. Lets talk about how the creation of “Product Lines” can help you achieve this.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Conway’s law - How Organization Structure affects Software Architecture</title><link href="http://0.0.0.0:4000/software-architecture/2019/10/19/conways-law/" rel="alternate" type="text/html" title="Conway's law - How Organization Structure affects Software Architecture" /><published>2019-10-19T00:00:00+01:00</published><updated>2019-10-19T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/10/19/conways-law</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/10/19/conways-law/">&lt;p&gt;Lets understand how the organization structure can affect the way the system is developed.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The &lt;strong&gt;Conway’s law&lt;/strong&gt; says:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;A system will tend to take a form that is congruous to the organization that produced it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Imagine that your organization has only one team that is responsible to develop a new component. It is easy to them to agree how it will be developed: message format, interfaces, code style, etc.&lt;/p&gt;

&lt;p&gt;When happens that another team comes to develop a new component that will integrate with the first one. They also can easily agree on a message format and protocol without thinking about other cases, since for now only these two components are talking to each other. The developers teams are on the same floor, so the communication flows smoothly.&lt;/p&gt;

&lt;p&gt;As the organization starts to grow, other teams are being created and new components are needed. They keep talking to each other and creating agreements separately. Sooner or later it is realized that the costs and risk to introduce new features are big due to tightly coupled components and lack of standards that were “not needed” at the beginning, but their absence became a huge problem now.&lt;/p&gt;

&lt;p&gt;This is a really common situation and in my professional life I already saw it happening. The developers and engineers then try to create standards and conventions to “fix” the architecture, but it costs a lot to the company and takes much time (maybe years) to complete. Meanwhile new features need to be added you will se yourself changing the wheel with the car running.&lt;/p&gt;

&lt;p&gt;Of course it is possible and it is part of our work to improve, but have a more serious vision about standards and well designed, loosely coupled and interoperable system from the beginning can save your company (and you) a lot of money, time to market and hair from your head.&lt;/p&gt;

&lt;h1 id=&quot;solutions&quot;&gt;Solutions&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Before start developing define &lt;strong&gt;organization’s standards&lt;/strong&gt; (architectural and code) and follow market conventions. This will improve also the &lt;strong&gt;Conceptual Integrity&lt;/strong&gt; of the architecture. New colleagues learning curve will also be lower. Examples:
    &lt;ul&gt;
      &lt;li&gt;RFCs.&lt;/li&gt;
      &lt;li&gt;Communications protocols.&lt;/li&gt;
      &lt;li&gt;Common Data / Message formats.&lt;/li&gt;
      &lt;li&gt;Code standards.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Involve other teams&lt;/strong&gt; or at least a main responsible before a new feature or components being developed to help validated the interoperability and reusability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;Use &lt;strong&gt;code reviews&lt;/strong&gt; to validate new components are following company standards and conventions.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">Lets understand how the organization structure can affect the way the system is developed.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Software Architecture Quality Attributes</title><link href="http://0.0.0.0:4000/software-architecture/2019/10/11/software-architecture-quality-attributes/" rel="alternate" type="text/html" title="Software Architecture Quality Attributes" /><published>2019-10-11T00:00:00+01:00</published><updated>2019-10-11T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/10/11/software-architecture-quality-attributes</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/10/11/software-architecture-quality-attributes/">&lt;p&gt;When we are talking about evaluate the quality of a Software Architecture, there are some questions that cannot be answered by Design Patterns and Principles or how the elements in the architecture interact each other.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Lets take as example the “Design Patterns”, they cannot assure you software testability, usability, availability, user experience, performance, etc. The are mostly made to insure reusability, flexibility and maintainability.&lt;/p&gt;

&lt;p&gt;So how to understand if a software will have the desired quality?&lt;/p&gt;

&lt;h1 id=&quot;use-the-right-architecture-to-the-right-environment&quot;&gt;Use the right architecture to the right environment&lt;/h1&gt;

&lt;p&gt;Lets suppose you were hired to plan a multiplayer game that will be accessed by 5 different continents from end-users.&lt;/p&gt;

&lt;p&gt;You could choose for instance an &lt;strong&gt;Event-Based&lt;/strong&gt; architecture, which is a good choice in this case, but combined this with a &lt;strong&gt;Data Centric&lt;/strong&gt; architecture which will make your application be very slow and unusable for the end users. Even if you architecture has fulfilled the &lt;strong&gt;functional requirements&lt;/strong&gt;, there might be hidden &lt;strong&gt;non-functional requirements&lt;/strong&gt; like response time, etc that were ignored.&lt;/p&gt;

&lt;p&gt;The non-functional requirements must be raised by the architects to the stakeholders, before defining the architecture, otherwise  they can lead to a complete fail.&lt;/p&gt;

&lt;p&gt;Remember that different stakeholders have different perspectives and expectations, so the role of the architect is to extract them into requirements and find the architecture with the best quality as possible to meet their needs.&lt;/p&gt;

&lt;h1 id=&quot;quality-attributes&quot;&gt;Quality Attributes&lt;/h1&gt;

&lt;p&gt;A tool to find the better quality architecture is by using quality attributes. They are measurable properties to evaluate performance, usability and design. Of course, as we have different stakeholders, the quality attributes will vary according to each perspective:&lt;/p&gt;

&lt;h2 id=&quot;quality-attributes-for-developers&quot;&gt;Quality Attributes for Developers&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Maintainability&lt;/strong&gt;: &lt;em&gt;How easy the system can undergo through changes&lt;/em&gt;? Usage of Design patterns can help reducing costs to maintain the system.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Reusability&lt;/strong&gt;: How your systems &lt;em&gt;functions or parts can be used by another&lt;/em&gt;. An high cohesive and loosely coupled architecture brings benefit here.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Flexibility&lt;/strong&gt;: Requirements changes and new functionalities are added unpredictably many times. So flexibility means how your system can &lt;em&gt;adapt to requirement changes&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Modifiability&lt;/strong&gt;: A system with good modifiability can be &lt;em&gt;easily changed or have a new functionality incorporated or removed&lt;/em&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Testability&lt;/strong&gt;: As new changes occur in the system, it must be tested to guaranty best quality for end-users. Test automation can provide better testability and enforces you to develop good quality systems, besides easily demonstrate errors with test execution.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Conceptual Integrity&lt;/strong&gt;: Naming conventions, usage of a common object modeling architecture and code structure (i.e. DDD) will help you to keep conceptual integrity. It will reduce learning curves within developers to different applications and new features.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;quality-attributes-for-end-users&quot;&gt;Quality Attributes for end users&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Availability&lt;/strong&gt;: Does the amount of time the system is available harm the user experience? Redundancy, multi-region deploy, load balancing, monitoring, etc are ways to maintain a good availability.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Interoperability&lt;/strong&gt;: Nowadays systems do not exist in isolation. They depend on data provided by other systems. Well defined and standardized communications protocols and data formats will facilitate the system to exchange information with another.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Security&lt;/strong&gt;: The capacity of the system to safely store, process and transfer sensitive data. Authorization and authentication checks, cryptography, etc are some examples to keep a system safe.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Performance&lt;/strong&gt;: The system throughput, latency should be acceptable to not affect end user experience. Multi-region deployment, load balancing, usage of CDN and many others are techniques to increase performance.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Usability&lt;/strong&gt;: Defines how easy is the system to be used. Does it contain a friendly user interface and easy to navigate? This item is close to UI and UX areas.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;To reach the best architecture that meets the stakeholders expectation we must involve them to collect all the functional and non-functional requirements. Moreover, gather and classify the Software Architecture Quality Attributes according to their expectations. It is not recommended to invest much time with further architecture and design steps before have the quality attributes clear, since they can drastically influence the architecture style and technologies used.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">When we are talking about evaluate the quality of a Software Architecture, there are some questions that cannot be answered by Design Patterns and Principles or how the elements in the architecture interact each other.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Software Architectural Styles</title><link href="http://0.0.0.0:4000/software-architecture/2019/10/04/software-architectural-styles/" rel="alternate" type="text/html" title="Software Architectural Styles" /><published>2019-10-04T00:00:00+01:00</published><updated>2019-10-04T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/10/04/software-architectural-styles</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/10/04/software-architectural-styles/">&lt;p&gt;A brief overview about the main software architectural styles and why and when we use them.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;language-based-systems&quot;&gt;Language-based Systems&lt;/h1&gt;

&lt;p&gt;The programing language you choose to build your software will define the way you will architect it due their limitations or advantages.&lt;/p&gt;

&lt;p&gt;For instance, a OOP (i.e. Java) will probably give you a better domain abstraction than a procedural language (i.e. C), but you cost you more performance and wont work for embedded software.&lt;/p&gt;

&lt;h2 id=&quot;abstract-types-and-object-oriented&quot;&gt;Abstract Types and Object Oriented&lt;/h2&gt;

&lt;p&gt;Using a OOP paradigm we have better application of “Abstraction”, “Encapsulation” and “Decomposition” principles. The code produced can better translate the business language and generally the learning curve is smaller. High-level programing languages generally are intuitive and have lots of third-party libraries that already solve common problems.&lt;/p&gt;

&lt;p&gt;The cons is that it generally implies less performance and higher computational power is required. It is more difficult (and impossible sometimes) to create lightweight or embedded software with this paradigm.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Management and administrative systems.&lt;/li&gt;
  &lt;li&gt;Web apps.&lt;/li&gt;
  &lt;li&gt;Mobile apps.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;main-program-and-subroutines&quot;&gt;Main program and Subroutines&lt;/h2&gt;

&lt;p&gt;This paradigm consists in usage of procedural code based on routines and subroutines sharing globals variables and procedures. It advantage is a very lightweight and highly performative software that consumes less computational power and energy. The cons is that is really difficult to maintain and the learning curve is higher. Low-level programing languages are generally not intuitive at all do not translate well the business language.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Usages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Embedded software.&lt;/li&gt;
  &lt;li&gt;Computational focused systems.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;repository-based-systems&quot;&gt;Repository Based Systems&lt;/h1&gt;
&lt;p&gt;When it is needed to shared data within modules and components an often used solution is a &lt;strong&gt;Data Centric&lt;/strong&gt; Software Architecture.&lt;/p&gt;

&lt;h2 id=&quot;databases&quot;&gt;Databases&lt;/h2&gt;
&lt;p&gt;At the core of a Data Centric architecture are &lt;strong&gt;2 different types of components&lt;/strong&gt;:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Central Data&lt;/strong&gt;: Stores and share data across all the components that connect to it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Data Accessors&lt;/strong&gt;: They are the components that connect to the Central Data component. These run queries, transactions to store and retrieve data from the Database.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/data-centric-software-architecture.png&quot; alt=&quot;UML Data Centric Software Architecture&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;UML Data Centric Software Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The &lt;strong&gt;main benefits&lt;/strong&gt; of a data centric architecture style, besides share data are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Data Integrity&lt;/strong&gt;: Data will be store with proper normalization and will be accurate.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Backup&lt;/strong&gt;: Data containing the current state of the system can be saved to be used later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Restoration&lt;/strong&gt;: System state can be restored through backup.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Data Persistence&lt;/strong&gt;: Data will keep alive to be used later.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Central Data is Passive&lt;/strong&gt;: The main focus is storage, so the business rules stay in the application level.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But some &lt;strong&gt;disadvantages of a data centric architecture&lt;/strong&gt; are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;System &lt;strong&gt;rely on a single data source&lt;/strong&gt;, that, if fails, compromise all the applications.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Difficult to change schema&lt;/strong&gt;, cause it is being used for many components.&lt;/li&gt;
  &lt;li&gt;As the data is used by many places, the &lt;strong&gt;overload&lt;/strong&gt; of one application can &lt;strong&gt;affect all the others&lt;/strong&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;layered-systems&quot;&gt;Layered Systems&lt;/h1&gt;

&lt;p&gt;In the real world when we need to send or receive some information, we may need to talk to representatives instead of directly communicate with the final receivers. This way we guarantee the information will arrive in a standard way and we can continue focusing on our main work, emphasizing the &lt;strong&gt;separation of concerns&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/layered-software-architecture.png&quot; alt=&quot;Layered Software Architecture&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Layered Software Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;When we have a layered architecture the components are only allowed to talk to adjacent components. So they do not know about upper or lower layers of the system. With this we ensure our applications will be loosely coupled and their state will not affect or be affected directly by other applications.&lt;/p&gt;

&lt;h2 id=&quot;client-server-n-tier&quot;&gt;Client Server n-tier&lt;/h2&gt;

&lt;p&gt;Layered architecture is about make components loosely coupled and restricting their communication within only adjacent layers.&lt;/p&gt;

&lt;p&gt;The n-tier or multi-tier happens when this components are also separated by being located in separate machines. So their performance, computational power consumption and environment requirements will not directly affect each other. Also other benefits like load balancing and autoscaling are benefited by a multi-tier architecture.&lt;/p&gt;

&lt;p&gt;The relation between client and server components in a multi-tear architecture can occur in an synchronous our asynchronous way using events, web sockets and request/response handlers.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Advantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Scalable&lt;/strong&gt;: As components are distributed in different servers, it is possible to farm them and increase application capacity using techniques like load balancing and autoscaling.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Centralization&lt;/strong&gt;: Centralized functionalities and computational power only to the relevant components.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Distribution of computational power&lt;/strong&gt;: Only necessary application servers need to have specific hardware. It can scales horizontally if needed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Ad complexity do infrastructure management.&lt;/li&gt;
  &lt;li&gt;Ad complexity to data synchronization.&lt;/li&gt;
  &lt;li&gt;Demands extra resource to manage client/server relationships.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;interpreter-based-systems&quot;&gt;Interpreter-based systems&lt;/h1&gt;

&lt;h2 id=&quot;interpreters&quot;&gt;Interpreters&lt;/h2&gt;

&lt;p&gt;Interpreters are programs that read and execute code provided by the user. The user does not need to know how the underlying logic of the interpreter, just the right code to provide.&lt;/p&gt;

&lt;p&gt;Interpreters are used to execute Scripts os Macros. Examples os Interpreter-based systems are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Google Chrome&lt;/strong&gt;: Where you can create your extension using Javascript to customize or add features to the browser.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Microsoft Excel&lt;/strong&gt;: The Excel formulas are core instructions that will be executed by it internal interpreter. The user does not know how the interpreter works, just how to declare the functions correctly.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;state-transition-systems&quot;&gt;State Transition Systems&lt;/h2&gt;

&lt;p&gt;This is actually a concept to describe all potential behaviors a system can have, does not matter they have a low probability to happen, a State Transition will describe how to reach that state.&lt;/p&gt;

&lt;p&gt;Terminology:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;State&lt;/strong&gt;: It is a information the system remembers. Example: An e-commerce system can have the states: “Empty cart”, “Full cart” or “Under Checkout” states.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Transition&lt;/strong&gt;: Defines the transition from one state to another. We have a non-deterministic transition when from on state, multiple states are possible.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;strong&gt;Behavior&lt;/strong&gt;: Describes what the system will do when arrive to a condition. This can be determined by user input, events or time.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Some practical usage example is how operational systems manage resource allocation using state machine and multithread.&lt;/p&gt;

&lt;h1 id=&quot;dataflow-systems&quot;&gt;DataFlow Systems&lt;/h1&gt;

&lt;p&gt;A data flow architecture treats the system as a series of transformations in a data set.&lt;/p&gt;

&lt;h2 id=&quot;pipes--filters&quot;&gt;Pipes &amp;amp; Filters&lt;/h2&gt;

&lt;p&gt;The pipes are the channels from which the date flows from a filter to another.&lt;/p&gt;

&lt;p&gt;The filters are responsible to receive the input from the Pipe, transform it and follow to another Pipe, that will follow to another Filter and so on.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/filter_pipes.jpg&quot; alt=&quot;Filter and Pipes Architecture&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Filter and Pipes Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Advantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Loosely coupled architecture.&lt;/li&gt;
  &lt;li&gt;Better maintainability, flexibility and scalability.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Disadvantages:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Become slower as more filters and pipes are added.&lt;/li&gt;
  &lt;li&gt;Since the filters are loosely coupled and independent, redundancy can happen.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;implicit-invocation-systems&quot;&gt;Implicit Invocation Systems&lt;/h1&gt;

&lt;h2 id=&quot;event-based&quot;&gt;Event-Based&lt;/h2&gt;

&lt;p&gt;Derived from the Event-Driven paradigm, the Event Based Architecture happens when functions are executed trigged by Events, that could be inputs, signals, messages or data coming from other functions or programs. These Events are created by and Event Generator and listened by an Event Consumer or Subscriber.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/event-driven.png&quot; alt=&quot;Event Driven Architecture&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Event Driven Architecture&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;strong&gt;Event generators&lt;/strong&gt;: Generate and send the messages to be processed.
&lt;strong&gt;Event consumers&lt;/strong&gt;: Receive the messages to be processed and process them.&lt;/p&gt;

&lt;p&gt;The communication between Event Generators and Event Consumers is not direct, being called “Implicit Invocation”. This intermediation is done by a “Event Bus”.&lt;/p&gt;

&lt;p&gt;When working with event based is important to be aware of &lt;strong&gt;race conditions&lt;/strong&gt; to avoid undesired results when shared data is not updated correctly.&lt;/p&gt;

&lt;p&gt;For instance, when one event updates a resource before a previous event that also updates the same resource was executed. To solve this there are some techniques like &lt;strong&gt;semaphores&lt;/strong&gt; and message acknowledgement.&lt;/p&gt;

&lt;h2 id=&quot;publish-subscribe&quot;&gt;Publish Subscribe&lt;/h2&gt;

&lt;p&gt;Different of Event-Based architecture, “Publish Subscribe” systems enforces that components should be either publishes or subscribers, but never both. Also the relationship between Publisher and Subscriber can vary in form and closeness.&lt;/p&gt;

&lt;p&gt;Publishes and subscribers are not explicitly related, so they are also following Implicit Invocation. Examples are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;RSS Feed.&lt;/li&gt;
  &lt;li&gt;Mail lists.&lt;/li&gt;
  &lt;li&gt;Mobile messages subscriptions.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;process-control-systems&quot;&gt;Process Control Systems&lt;/h1&gt;

&lt;p&gt;Control is important for many types of process in order to know they will operate in a safe way and achieve the expectations with efficiency.&lt;/p&gt;

&lt;h2 id=&quot;process-control&quot;&gt;Process Control&lt;/h2&gt;

&lt;p&gt;One of the techniques of process control is called &lt;strong&gt;Feedback Loop&lt;/strong&gt;. It consists in some elements (Let’s take a water level control system):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Sensor&lt;/strong&gt;: Monitor important information to be checked. I.e. Sensor to detect water volume.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Controller&lt;/strong&gt;: The logic to check the information monitored and act accordingly. I.e. Check water volume and increase / decrease volume.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Actuator (or effector)&lt;/strong&gt;: How the manipulate the process. I.e. A Water pump (increase / decrease the water level).&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Process&lt;/strong&gt;: What is being controlled. I.e: Water tank.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Set Point&lt;/strong&gt;: The desired state of the process. I.e: 5 cubic meters of water.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/feedback-loop.png&quot; alt=&quot;Feed-back Loop process control&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Feed-back Loop process control&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this case the Feed-back loop runs continuously monitoring the water volume based on the set point and adjusting the water pump (open / close) to maintain the water volume.&lt;/p&gt;

&lt;p&gt;Another process control technique, commonly used for more complex process controls is the &lt;strong&gt;MAPE-K&lt;/strong&gt;.&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/mape-k.png&quot; alt=&quot;Mape-k process control&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Mape-k process control&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;In this technique all the steps must have knowledge of the process state.&lt;/p&gt;

&lt;p&gt;The MAPE-K technique is used for instance on &lt;strong&gt;self-driving cars&lt;/strong&gt; software in combination with &lt;strong&gt;machine learning&lt;/strong&gt; and &lt;strong&gt;big data&lt;/strong&gt; to help in the analyze and plan steps.&lt;/p&gt;

&lt;p&gt;The new steps here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Monitor&lt;/strong&gt;: Check the state and other metrics provide by the sensors, beside the current state of the process.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Analyze&lt;/strong&gt;: Evaluate metrics according to system configurations, set points, etc.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Plan&lt;/strong&gt;: This part the system needs to understand what is happening to know which action to take to reach the desired result. This can be done using machine learning, big data or some AI techniques.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Execute&lt;/strong&gt;: Update the process based on previous analyze and plan.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">A brief overview about the main software architectural styles and why and when we use them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Kruchten’s 4 + 1</title><link href="http://0.0.0.0:4000/software-architecture/2019/10/01/kruchtens-4-1-view-model/" rel="alternate" type="text/html" title="Kruchten's 4 + 1" /><published>2019-10-01T00:00:00+01:00</published><updated>2019-10-01T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/10/01/kruchtens-4-1-view-model</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/10/01/kruchtens-4-1-view-model/">&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/4%2B1_architectural_view_model&quot;&gt;Kruchten’s 4 + 1&lt;/a&gt; technique consists to represent how a system should be implemented by dividing it in &lt;strong&gt;4 different views&lt;/strong&gt; that are discovered through some business &lt;strong&gt;Scenarios&lt;/strong&gt; or “Stories”.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;figure class=&quot;figure  figure--left&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;https://upload.wikimedia.org/wikipedia/commons/e/e6/4%2B1_Architectural_View_Model.svg&quot; alt=&quot;Source: https://upload.wikimedia.org/wikipedia/commons/e/e6/4%2B1_Architectural_View_Model.svg&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Source: https://upload.wikimedia.org/wikipedia/commons/e/e6/4%2B1_Architectural_View_Model.svg&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;logical-view&quot;&gt;Logical View&lt;/h2&gt;

&lt;p&gt;This view’s intent is to capture the software functionality provided to the end-users. Here we can abstract the actors and process of our system in classes.&lt;/p&gt;

&lt;p&gt;The UML Diagrams used here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class Diagram&lt;/li&gt;
  &lt;li&gt;State Diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;process-view&quot;&gt;Process View&lt;/h2&gt;

&lt;p&gt;To show how process and subprocess interaction within the logical view. The efficiency and performance of the system comes in evidence here.&lt;/p&gt;

&lt;p&gt;The UML Diagrams used here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Activity Diagram&lt;/li&gt;
  &lt;li&gt;Sequence Diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;development-view&quot;&gt;Development view&lt;/h2&gt;

&lt;p&gt;This view focus on implementation details, such as hierarchical structure of the software and other constraints from programing the language and technologies used.&lt;/p&gt;

&lt;p&gt;The UML Diagrams used here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Component Diagram&lt;/li&gt;
  &lt;li&gt;Package Diagram&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;physical-view&quot;&gt;Physical View&lt;/h2&gt;

&lt;p&gt;Here we can map how system interact with physical devices. The deployment process generally is part of the Physical view.&lt;/p&gt;

&lt;p&gt;The UML Diagrams used here are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Deployment Diagram&lt;/li&gt;
  &lt;li&gt;Package Diagram&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">The Kruchten’s 4 + 1 technique consists to represent how a system should be implemented by dividing it in 4 different views that are discovered through some business Scenarios or “Stories”.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Liskov Substitution Principle - LSP</title><link href="http://0.0.0.0:4000/design-principles/solid/2019/09/29/liskov-solid-substitution-principle/" rel="alternate" type="text/html" title="Liskov Substitution Principle - LSP" /><published>2019-09-29T00:00:00+01:00</published><updated>2019-09-29T00:00:00+01:00</updated><id>http://0.0.0.0:4000/design-principles/solid/2019/09/29/liskov-solid-substitution-principle</id><content type="html" xml:base="http://0.0.0.0:4000/design-principles/solid/2019/09/29/liskov-solid-substitution-principle/">&lt;p&gt;Lets talk about Liskov Substitution Principle and how inheritance should be implemented. Yes, we are talking about the “L” from SOLID Design Principles.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;Implementing inheritance in a wrong way could be a trap for you, even worse than maintaining only concrete classes.&lt;/p&gt;

&lt;p&gt;When different subclasses start changing the behavior of the program by being replaced by each other, then hidden behaviors are introduced and it will cause inconsistency and implying to add extra conditions to “workaround” these anomalies. From that point is all the way down.&lt;/p&gt;

&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/Liskov_substitution_principle&quot;&gt;Liskov substitution principle (LSP)&lt;/a&gt; defines about subtyping relation by &lt;strong&gt;(strong) behavioral subtyping&lt;/strong&gt;. It says:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
 If S is a subtype of T, then objects of type T in a program may be replaced with objects of type S without altering any of the desirable properties of that program
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The &lt;strong&gt;4 major rules to comply to LSP&lt;/strong&gt; are:&lt;/p&gt;

&lt;h1 id=&quot;1-subclass-cannot-decide-base-class-method-invocation&quot;&gt;1. Subclass cannot decide base class method invocation&lt;/h1&gt;

&lt;p&gt;A subclass MUST NOT add extra conditions to a base class method be called.&lt;/p&gt;

&lt;h1 id=&quot;2-base-class-state-cannot-differ&quot;&gt;2. Base class state cannot differ&lt;/h1&gt;

&lt;p&gt;The &lt;strong&gt;base class&lt;/strong&gt; state after a call from a subclass cannot be different if the call is done by another subclass. The results should be the same.&lt;/p&gt;

&lt;h1 id=&quot;3-invariants-from-base-class-must-remain-in-subclasses&quot;&gt;3. Invariants from base class must remain in subclasses&lt;/h1&gt;

&lt;p&gt;The invariant conditions should be immutable, so subclasses should not change them an cause side effects in the behavior of the program or base class.&lt;/p&gt;

&lt;h1 id=&quot;4-immutable-characteristics-from-based-class-should-not-be-changed&quot;&gt;4. Immutable characteristics from based class should not be changed&lt;/h1&gt;

&lt;p&gt;The base class sometimes have its own attributes that are or not encapsulated, if changing these attributes changes the base class state, so they are immutable. Avoid protected attributes as much as you can. Update these attributes can cause undesired side effects in the program or base class.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example&lt;/h1&gt;

&lt;div class=&quot;language-php highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;cp&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// Base class&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProductSearch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cd&quot;&gt;/**
     * @throws InvalidArgumentException
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;validateCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; 
        &lt;span class=&quot;c1&quot;&gt;//... &lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;abstract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResultItem&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchSummary&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;validateCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;processResults&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        
        &lt;span class=&quot;nv&quot;&gt;$summary&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchSummary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setTotal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$summary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;nb&quot;&gt;array_map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResultItem&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;normalizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$summary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Subclass, does not change behavior&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ElasticSearchProductSearch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductSearch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return specific ElasticSearch results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResultItem&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return normalized ElasticSearch result item&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Subclass, does not change behavior&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MySQLProductSearch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductSearch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return specific MySQL results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResultItem&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return normalized MySQL result item&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Subclass, does not change behavior&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RedisProductSearch&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ProductSearch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;executeSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;array&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return specific Redis results&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;normalizeResult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$item&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;ResultItem&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;// return normalized Redis result item&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SearchController&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;cd&quot;&gt;/**
     * @var ProductSearch
     */&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$productSearch&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Request&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchSummary&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;productSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;SearchCommand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
                &lt;span class=&quot;nv&quot;&gt;$request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getQueryParam&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'term'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nv&quot;&gt;$this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;view&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;render&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nv&quot;&gt;$results&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">Lets talk about Liskov Substitution Principle and how inheritance should be implemented. Yes, we are talking about the “L” from SOLID Design Principles.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Open / Closed Principle - OCP</title><link href="http://0.0.0.0:4000/design-principles/solid/2019/09/28/open-closed-principle/" rel="alternate" type="text/html" title="Open / Closed Principle - OCP" /><published>2019-09-28T00:00:00+01:00</published><updated>2019-09-28T00:00:00+01:00</updated><id>http://0.0.0.0:4000/design-principles/solid/2019/09/28/open-closed-principle</id><content type="html" xml:base="http://0.0.0.0:4000/design-principles/solid/2019/09/28/open-closed-principle/">&lt;p&gt;The Open/Close Principle says that a class must be open for extension, but closed to change. Let’s take a look on it.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;If classes are tested, stable and the system is proven to be working with those, probably you do not want (need) to change then to add more features. So the classes will be open for extension, but closed to changes.&lt;/p&gt;

&lt;p&gt;To overcome this you can use polymorphism to add new features by inheritance or implementing same interfaces.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">The Open/Close Principle says that a class must be open for extension, but closed to change. Let’s take a look on it.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Interface Segregation Principle - ISP</title><link href="http://0.0.0.0:4000/design-principles/solid/2019/09/27/interface-segregation-principle/" rel="alternate" type="text/html" title="Interface Segregation Principle - ISP" /><published>2019-09-27T00:00:00+01:00</published><updated>2019-09-27T00:00:00+01:00</updated><id>http://0.0.0.0:4000/design-principles/solid/2019/09/27/interface-segregation-principle</id><content type="html" xml:base="http://0.0.0.0:4000/design-principles/solid/2019/09/27/interface-segregation-principle/">&lt;p&gt;A class should not be forced to do what it does not do. What? Yes, the way you built interfaces can cause this side effect.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The Interface Segregation Principle (ISP) says says that class should not be forced to depend on method it does not use.&lt;/p&gt;

&lt;p&gt;To table this, segregate a interfaces in more and specialized ones.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example:&lt;/h1&gt;

&lt;p&gt;Imagine that you want to extract Bird behaviors for an interface.&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putEggs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;land&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Seems good, right? But what about penguins, chickens or other birds that does not fly? To solve this we can segregate the Bird interfaces in more specialized ones:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;putEggs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;peck&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;interface&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flying&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;fly&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;land&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Penguin&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Chicken&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Falcon&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Bird&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Flying&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//...&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">A class should not be forced to do what it does not do. What? Yes, the way you built interfaces can cause this side effect.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Dependency Inversion Principle - DIP</title><link href="http://0.0.0.0:4000/design-principles/solid/2019/09/26/dependency-inversion-principle/" rel="alternate" type="text/html" title="Dependency Inversion Principle - DIP" /><published>2019-09-26T00:00:00+01:00</published><updated>2019-09-26T00:00:00+01:00</updated><id>http://0.0.0.0:4000/design-principles/solid/2019/09/26/dependency-inversion-principle</id><content type="html" xml:base="http://0.0.0.0:4000/design-principles/solid/2019/09/26/dependency-inversion-principle/">&lt;p&gt;Avoid making classes depending on concrete class to reduce coupling. Reduce the maintenance effort and risk of your system.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;The Dependency Inversion principle says that classes should relay on generalizations rather than implementation details.&lt;/p&gt;

&lt;p&gt;To accomplish this always develop oriented to interfaces, not implementation. Extract the behavior representation of classes to interfaces and abstract classes, so they can easily be replaced.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">Avoid making classes depending on concrete class to reduce coupling. Reduce the maintenance effort and risk of your system.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Law of Demeter - Least Knowledge Principle</title><link href="http://0.0.0.0:4000/design-principles/2019/09/25/law-of-demeter/" rel="alternate" type="text/html" title="Law of Demeter - Least Knowledge Principle" /><published>2019-09-25T00:00:00+01:00</published><updated>2019-09-25T00:00:00+01:00</updated><id>http://0.0.0.0:4000/design-principles/2019/09/25/law-of-demeter</id><content type="html" xml:base="http://0.0.0.0:4000/design-principles/2019/09/25/law-of-demeter/">&lt;p&gt;A class should know as less as possible about other classes implementation. There is a law for it!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;A class should only know about first implementation of its “immediate fried” classes. This is important to avoid coupling and make your system more flexible, reusable, maintainable and with low coupling.&lt;/p&gt;

&lt;h1 id=&quot;example&quot;&gt;Example:&lt;/h1&gt;

&lt;p&gt;Let’s check the allowed usages:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And these are not allowed:&lt;/p&gt;

&lt;div class=&quot;language-java highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;A&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;C&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doB&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAgain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOT Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAgain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOT Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doD&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;D&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doAgain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOT Allowed!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;C2&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;do&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// NOT Allowed, cause C2 is a base class of C and A only knows C!&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">A class should know as less as possible about other classes implementation. There is a law for it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry></feed>