<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en-GB"><generator uri="https://jekyllrb.com/" version="3.8.6">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" hreflang="en-GB" /><updated>2019-09-11T20:13:47+01:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">Gabriel’s Blog</title><subtitle>Sharing my thoughts about IT related subjects</subtitle><author><name>Gabriel Felipe Soares</name></author><entry><title type="html">Important concepts about Software Design and Software architecture</title><link href="http://0.0.0.0:4000/software-architecture/2019/09/11/software-design-architecuture/" rel="alternate" type="text/html" title="Important concepts about Software Design and Software architecture" /><published>2019-09-11T00:00:00+01:00</published><updated>2019-09-11T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/09/11/software-design-architecuture</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/09/11/software-design-architecuture/">&lt;p&gt;What is Software Design and Architecture? How they relate and differ each other?&lt;/p&gt;

&lt;!-- more --&gt;

&lt;h1 id=&quot;software-architecture&quot;&gt;Software Architecture&lt;/h1&gt;

&lt;p&gt;You can imagine the project of a house as example:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;How many rooms does it have and how they are connected: What is the house position and how many people it can support? These are higher level questions and show interactions of many “components” in a wide scope.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So during the architecture we need to know:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The big picture of the problem we need to solve.&lt;/li&gt;
  &lt;li&gt;What are the possible solutions.&lt;/li&gt;
  &lt;li&gt;Define how the “overall” solution would look like.&lt;/li&gt;
  &lt;li&gt;Necessary requirements for an stable and long living solution.&lt;/li&gt;
  &lt;li&gt;Define the quality tradeoffs.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;what-is-quality-trade-off&quot;&gt;What is quality trade-off?&lt;/h2&gt;

&lt;p&gt;A tradeoff happens when to make an improvement you must sacrifice some other quality, for example: Adding security layer even if it costs some performance, but application is safier.&lt;/p&gt;

&lt;h1 id=&quot;software-design&quot;&gt;Software Design&lt;/h1&gt;

&lt;p&gt;For the very same project of the house, now we need to build the kitchen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Which pipes will we use? What will be the wall’s colors and material. How many sinks and which sizes? etc.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;When we enter in “implementation” details of a “components” we are talking about the design. But what are the stages of the design?&lt;/p&gt;

&lt;h2 id=&quot;stage-1-conceptual-design&quot;&gt;Stage 1: Conceptual Design&lt;/h2&gt;

&lt;p&gt;This part is closer to the software behaviour and funcional validation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Collect and validate customer requirements.&lt;/li&gt;
  &lt;li&gt;Create conceptual mockups: Mockups will help you visualize your problem space in the earliest stages.&lt;/li&gt;
  &lt;li&gt;Validate mockups with customers.&lt;/li&gt;
  &lt;li&gt;Create the CRC (Class Responsibility Colaborator) cards: They will help you identify classes and components.&lt;/li&gt;
  &lt;li&gt;Reveal “hidden” questions from customer.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;technical-design&quot;&gt;Technical Design&lt;/h2&gt;

&lt;p&gt;This part is closer to the software implementation.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Turn the conceptual design into a more precise design. Go into details, for instance using UML.&lt;/li&gt;
  &lt;li&gt;Define code structure and turn mockups into classes.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-is-crc-class-responsibility-colaborator&quot;&gt;What is CRC (Class Responsibility Colaborator)?&lt;/h1&gt;

&lt;p&gt;This technique helps you see the relations between classes or components.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Class or Component: The class or components that interact with other class or components.&lt;/li&gt;
  &lt;li&gt;Responsibilities: The responsibilities of this component.&lt;/li&gt;
  &lt;li&gt;Colaborators: Components this component interacts with.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;what-are-the-categories-of-objects-we-found-in-the-design-phase&quot;&gt;What are the categories of objects we found in the design phase?&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;Entity Objects: Real world entities that know threis rules and attributes. Example: Customer.&lt;/li&gt;
  &lt;li&gt;Boundary objects: Objects responsible to collect / send information to other systems. Example: Gateway, ContactForm.&lt;/li&gt;
  &lt;li&gt;Control objects: Objects that control other objects. Example: “Mediator”.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">What is Software Design and Architecture? How they relate and differ each other?</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Emulate Android on Android Studio 3 using Mac OSX El Captain 10.11.6</title><link href="http://0.0.0.0:4000/android/macos/2019/09/10/android-emulator-does-not-work-macos-el-captain-10-11-6/" rel="alternate" type="text/html" title="Emulate Android on Android Studio 3 using Mac OSX El Captain 10.11.6" /><published>2019-09-10T00:00:00+01:00</published><updated>2019-09-10T00:00:00+01:00</updated><id>http://0.0.0.0:4000/android/macos/2019/09/10/android-emulator-does-not-work-macos-el-captain-10-11-6</id><content type="html" xml:base="http://0.0.0.0:4000/android/macos/2019/09/10/android-emulator-does-not-work-macos-el-captain-10-11-6/">&lt;p&gt;If you are having problems to emulate Android using Mac OSX El Captain 10.11.6, may this can help you.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;If when trying to run the emulation you got the following message:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;Emulator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Sorry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;qemu-system-x86_64&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;can&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;be&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;run&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;on&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;version&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;of&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;macOS&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Qt&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;requires&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;or&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;later&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;you&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;have&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;macOS&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;10.11&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The solution can be downgrad your emulator version to (Android Emulator Version 28.0.25)[https://dl.google.com/android/repository/emulator-darwin-5395263.zip].&lt;/p&gt;

&lt;p&gt;After download you should replace your current emulator with this one. The emulator for &lt;strong&gt;Android Studio&lt;/strong&gt; generally is located on:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;YOUR_USERNAME&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/Library/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;Android&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;sdk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;emulator&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;So you can just replace the files and restart your Android studio.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">If you are having problems to emulate Android using Mac OSX El Captain 10.11.6, may this can help you.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Model Checking, What it is and why to use it</title><link href="http://0.0.0.0:4000/software-architecture/2019/09/08/software-architecture-model-checking/" rel="alternate" type="text/html" title="Model Checking, What it is and why to use it" /><published>2019-09-08T00:00:00+01:00</published><updated>2019-09-08T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/09/08/software-architecture-model-checking</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/09/08/software-architecture-model-checking/">&lt;p&gt;After finish the implementation of the so (or sometimes not) desired system, how do you know that it is (and behave) exactly as expected? Requirements change, people can forget, communications problems ocurr even in the best companies.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;small&gt;
&lt;em&gt;WIP:&lt;/em&gt; This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-is-model-checking&quot;&gt;What is Model Checking?&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Model checking&lt;/strong&gt; is the technique to check if the behaviour of the &lt;strong&gt;State Model&lt;/strong&gt; of your system work as expected and notify any &lt;strong&gt;violation&lt;/strong&gt;.&lt;/p&gt;

&lt;h2 id=&quot;what-is-a-state-model&quot;&gt;What is a State Model?&lt;/h2&gt;

&lt;p&gt;The &lt;strong&gt;State Model&lt;/strong&gt; is an abstract &lt;strong&gt;State Machine&lt;/strong&gt; that can be in one or various states, so the &lt;strong&gt;Model checker&lt;/strong&gt; can verify if the state mode conforms with expected behavior and properties.&lt;/p&gt;

&lt;h3 id=&quot;modeling-phase&quot;&gt;Modeling phase&lt;/h3&gt;

&lt;p&gt;Describe all possible states and properties to be checked against your system.&lt;/p&gt;

&lt;p&gt;You can use Unit Tests, BDD, etc. There are many tools out there to help you.&lt;/p&gt;

&lt;h3 id=&quot;running-phase&quot;&gt;Running phase&lt;/h3&gt;

&lt;p&gt;Run the necessary test of your &lt;strong&gt;State Machine&lt;/strong&gt; against the expectations described on the previous phase.&lt;/p&gt;

&lt;h3 id=&quot;analysis-phase&quot;&gt;Analysis phase&lt;/h3&gt;

&lt;p&gt;Check the results of the previous phase. If the State Model does not conforms with certain behaviour or property we ha a &lt;strong&gt;Violation&lt;/strong&gt; AKA &lt;strong&gt;Counterexamples&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;The outuput of a &lt;strong&gt;Counterexample&lt;/strong&gt; must show you exaclty how to reproduce the violation, so you system can be fixed.&lt;/p&gt;

&lt;h2 id=&quot;when-should-i-do-a-model-checking&quot;&gt;When should I do a Model checking?&lt;/h2&gt;

&lt;p&gt;Always &lt;strong&gt;after implementation&lt;/strong&gt; and &lt;strong&gt;before production deploy&lt;/strong&gt;. It is untrue that a Software can be perfect during the planning or modeling phases. The beauty of software is that it can change many times before and after its implementation. Business needs flexiblity, but we (developers) need to make sure it will work as expected after all those changes.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">After finish the implementation of the so (or sometimes not) desired system, how do you know that it is (and behave) exactly as expected? Requirements change, people can forget, communications problems ocurr even in the best companies.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Software Architecture Design Principles</title><link href="http://0.0.0.0:4000/software-architecture/2019/09/07/software-architecture-design-principles/" rel="alternate" type="text/html" title="Software Architecture Design Principles" /><published>2019-09-07T00:00:00+01:00</published><updated>2019-09-07T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/09/07/software-architecture-design-principles</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/09/07/software-architecture-design-principles/">&lt;p&gt;There are 4 important &lt;em&gt;Design Principles&lt;/em&gt; to guide architects when modeling software. They are the &lt;strong&gt;CoSICi&lt;/strong&gt; principles. I have invented this word to help me out memorize them! So far it is working and I would like to share it!&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;small&gt;
&lt;em&gt;WIP:&lt;/em&gt; This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)
&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-co-coupling--cohesion&quot;&gt;1. (Co) Coupling &amp;amp; Cohesion&lt;/h2&gt;

&lt;p&gt;Besides the different names, Coupling and Cohesion are intimally related, cause 
both concern about &lt;em&gt;software complexity&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Before explain each one, lets first define what is considered a &lt;em&gt;module&lt;/em&gt; within this scope.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Module&lt;/em&gt; can be a:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Software Component.&lt;/li&gt;
  &lt;li&gt;A Class&lt;/li&gt;
  &lt;li&gt;A Method of a Class&lt;/li&gt;
  &lt;li&gt;A Function&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;coupling&quot;&gt;Coupling&lt;/h3&gt;

&lt;p&gt;Coupling represents the level of complexity involving multiple modules.&lt;/p&gt;

&lt;h3 id=&quot;cohesion&quot;&gt;Cohesion&lt;/h3&gt;

&lt;p&gt;Cohesion represents the level of complexity inside a single module.&lt;/p&gt;

&lt;h3 id=&quot;and-how-to-evaluate-complexity&quot;&gt;And how to evaluate complexity?&lt;/h3&gt;

&lt;p&gt;To evaluate complexity we consider 3 important aspects: Degree, Easy, Flexibility:&lt;/p&gt;

&lt;h4 id=&quot;degree&quot;&gt;Degree&lt;/h4&gt;

&lt;p&gt;The Degree relates to the number of connections between modules. Are they tighlty coupled
to other modules?&lt;/p&gt;

&lt;h4 id=&quot;easy&quot;&gt;Easy&lt;/h4&gt;

&lt;p&gt;The Easy relates to how obvious are these connections. Do they follow a standard with meaningfull names and purspose?&lt;/p&gt;

&lt;h4 id=&quot;flexibility&quot;&gt;Flexibility&lt;/h4&gt;

&lt;p&gt;Can the module be used by others without refactoring? Does it have a generic interface that can be easily used by other modules without colateral effect?&lt;/p&gt;

&lt;h2 id=&quot;2-s-separation-of-concerns&quot;&gt;2. (S) Separation of Concerns&lt;/h2&gt;

&lt;p&gt;A component, service, class or method should have a single, clear and meaningfull purpose.&lt;/p&gt;

&lt;p&gt;Here comes handy the usage of SOLID principles, specially the (S) Single Responsibility.&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Relay on interfaces instead of concrete classes. When creating inerfaces, you can better define the classes responsibility.&lt;/li&gt;
  &lt;li&gt;Use propeties and methods access modifiers to restrict access.&lt;/li&gt;
  &lt;li&gt;Expose only necessary information on the APIs.&lt;/li&gt;
  &lt;li&gt;Avoid to appropriate data from other &lt;em&gt;Domains&lt;/em&gt; to your application. Respect the &lt;em&gt;Softwares Boundaries&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;3-i-information-hiding&quot;&gt;3. (I) Information Hiding&lt;/h2&gt;

&lt;p&gt;A module should only expose necessary information for other components. This means that a module
should only know what he needs to know to fill his purpose and also only expose information that is necessary for other modules purposes.&lt;/p&gt;

&lt;p&gt;Be aware to use &lt;em&gt;encapsulation&lt;/em&gt; and guard methods (i.e setter / constructors / getters) to receive and expose information in the correct ways.&lt;/p&gt;

&lt;h2 id=&quot;4-ci-conceptual-integrity&quot;&gt;4. (CI) Conceptual Integrity&lt;/h2&gt;

&lt;p&gt;I like to say the Conceptual Integrity is as good as the the alignment of business knowlege, technical expertise and process compliance that the individuals have.&lt;/p&gt;

&lt;p&gt;Tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Follow a code standard.&lt;/li&gt;
  &lt;li&gt;Traininig and adjust knowledge levels of the individuals to be as similar as possible.&lt;/li&gt;
  &lt;li&gt;Do Code Reviews to reinforce the standards are being applyed.&lt;/li&gt;
  &lt;li&gt;Have a weel defined, accepted and execute SDLC (Software Development Life Cycle). Does not matter if you use Scrum, Kanban, whaterfall or whatever. If it is accepted and used by the individuals, this is what matters.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">There are 4 important Design Principles to guide architects when modeling software. They are the CoSICi principles. I have invented this word to help me out memorize them! So far it is working and I would like to share it!</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry><entry><title type="html">Object Modeling Principles</title><link href="http://0.0.0.0:4000/software-architecture/2019/09/06/object-modeling-principles/" rel="alternate" type="text/html" title="Object Modeling Principles" /><published>2019-09-06T00:00:00+01:00</published><updated>2019-09-06T00:00:00+01:00</updated><id>http://0.0.0.0:4000/software-architecture/2019/09/06/object-modeling-principles</id><content type="html" xml:base="http://0.0.0.0:4000/software-architecture/2019/09/06/object-modeling-principles/">&lt;p&gt;There are 4 important &lt;em&gt;Principles&lt;/em&gt; when modeling objects! They are the &lt;strong&gt;ADEG&lt;/strong&gt;. Yes, as always I have invented a word to memorize them! Lets talk about them.&lt;/p&gt;

&lt;!-- more --&gt;

&lt;p&gt;&lt;small&gt;
&lt;em&gt;WIP:&lt;/em&gt; This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)
&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;An brief history review, first:&lt;/p&gt;

&lt;h1 id=&quot;1960s&quot;&gt;1960’s&lt;/h1&gt;

&lt;p&gt;During the 1960’s there was the &lt;strong&gt;Imperative Paradigm&lt;/strong&gt; where programs basically were composed of routines that interact with other small routines and shared the same &lt;strong&gt;Global Variables&lt;/strong&gt;. The processment were really expensive and the focus were most about hardware capacity than in the solution itself.&lt;/p&gt;

&lt;p&gt;This was the age of Cobol, Fortran and such imperative programing languages.&lt;/p&gt;

&lt;h1 id=&quot;1970s&quot;&gt;1970’s&lt;/h1&gt;

&lt;p&gt;In this period of time we had a huge avance and now developers could use &lt;strong&gt;local variables&lt;/strong&gt; without being worried about messup the system by trusting in shared global variables.&lt;/p&gt;

&lt;p&gt;Also the first scratch of what would become an “object” in the future was created, the &lt;strong&gt;Abstract Type&lt;/strong&gt; or structs.&lt;/p&gt;

&lt;p&gt;In this time, programs started beign splited in multiple files and C header file was introduced.&lt;/p&gt;

&lt;p&gt;This was the age of Algol, C, Pascal and other programing languages that allowed developers to use Abstract Types and local variables.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;C Struct example:&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nx&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Person&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;50&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;citNo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;float&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;salary&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;1980s-to-now&quot;&gt;1980’s to now&lt;/h1&gt;

&lt;p&gt;Finally the concept of object was applyed to program languages and became possible split the problem and classes and methods and became easier to use business language in the code.&lt;/p&gt;

&lt;p&gt;As examples of languages we can mention Java, C++, C# among many others object oriented languages.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Java class example&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;
&lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;kr&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    
    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setModel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;model&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;getBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

    &lt;span class=&quot;kr&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;setBrand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;brand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;1-abstraction&quot;&gt;1. Abstraction&lt;/h2&gt;

&lt;p&gt;The abstraction principle consists in “abstract” the general business needs into classes and methods without concert too much about details.&lt;/p&gt;

&lt;p&gt;At this point the idea is not mature yet and the goal is to translate the initial problem to a high level code base.&lt;/p&gt;

&lt;h2 id=&quot;2-decomposition&quot;&gt;2. Decomposition&lt;/h2&gt;

&lt;p&gt;As we start diging we find more business needes we did not think before the problem becomes bigger and bigger.&lt;/p&gt;

&lt;p&gt;Instead of get crazy, we start breaking down (or decomposing) the previous classes in more and specialized ones. We create abstractios, interfaces, new entities are discovered and so on.&lt;/p&gt;

&lt;p&gt;The goal here is to go deep in the details by decomposing the big problem in smaller and cotrolled solutons.&lt;/p&gt;

&lt;h3 id=&quot;types-of-decomposition-relations&quot;&gt;Types of Decomposition relations&lt;/h3&gt;

&lt;h4 id=&quot;association&quot;&gt;Association&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Relationship is optional&lt;/li&gt;
  &lt;li&gt;Associated classes are completely independent.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/uml-class-diagram-association.png&quot; alt=&quot;Uml class diagram Association example&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Uml class diagram Association example&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;aggregation&quot;&gt;Aggregation&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Weak &lt;strong&gt;has-a&lt;/strong&gt; relationship.&lt;/li&gt;
  &lt;li&gt;One object does not need to have the other to exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/uml-class-diagram-aggregation.png&quot; alt=&quot;Uml class diagram aggregation example&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Uml class diagram aggregation example&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h4 id=&quot;composition&quot;&gt;Composition&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Strong &lt;strong&gt;has-a&lt;/strong&gt; relationship&lt;/li&gt;
  &lt;li&gt;Associated classes are &lt;strong&gt;completely dependent&lt;/strong&gt;. Example, an object &lt;strong&gt;Human&lt;/strong&gt; always has an object &lt;strong&gt;Brain&lt;/strong&gt; associated, otherwise it cannot exist.&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/uml-class-diagram-composition.png&quot; alt=&quot;Uml class diagram composition example&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Uml class diagram composition example&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h2 id=&quot;3-encapsulation&quot;&gt;3. Encapsulation&lt;/h2&gt;

&lt;p&gt;When decomposing the classes we start creating new methods and attributes that concern only for those classes. It is time to use inheritance, abstraction and access modifiers to to restrict for them.&lt;/p&gt;

&lt;p&gt;We have some conventions for this like “getters” and “setter” methods, besides today they are controversial in some cases after the surge of Object Calisthenics.&lt;/p&gt;

&lt;h2 id=&quot;4-generalization&quot;&gt;4. Generalization&lt;/h2&gt;

&lt;p&gt;When a class inherits behavior or interface from a superior (super) class we call it &lt;strong&gt;Generalization&lt;/strong&gt;. It can happen in two ways:&lt;/p&gt;

&lt;figure class=&quot;figure  figure--center&quot;&gt;
  &lt;img class=&quot;image&quot; src=&quot;/assets/post_images/uml-class-diagram-generalization.png&quot; alt=&quot;Uml class diagram Generalization example&quot; width=&quot;&quot; height=&quot;&quot; /&gt;
  &lt;figcaption class=&quot;caption&quot;&gt;Uml class diagram Generalization example&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&quot;by-abstraction&quot;&gt;By Abstraction&lt;/h3&gt;

&lt;p&gt;An abstract class (cannot be instantiated) has some methods (behaviour) or propeties that can be shared with the &lt;strong&gt;chield classes&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&quot;by-interface&quot;&gt;By Interface&lt;/h3&gt;

&lt;p&gt;An interface (or Contract) is created, so the classes that implement this interface can entirely manange the internal implementation of the interface’s expected behaviour.&lt;/p&gt;

&lt;p&gt;Then comes in place the &lt;strong&gt;Polimorthism&lt;/strong&gt;.&lt;/p&gt;</content><author><name>Gabriel Felipe Soares</name></author><summary type="html">There are 4 important Principles when modeling objects! They are the ADEG. Yes, as always I have invented a word to memorize them! Lets talk about them.</summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="http://0.0.0.0:4000/assets/default-social-image.png" /></entry></feed>