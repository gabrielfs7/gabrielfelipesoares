

[
  
  
    
    
      {
        "title": "Object Modeling Principles",
        "excerpt": "There are 4 important Principles when modeling objects! They are the ADEG. Yes, as always I have invented a word to memorize them! Lets talk about them.\n\n",
        "content": "There are 4 important Principles when modeling objects! They are the ADEG. Yes, as always I have invented a word to memorize them! Lets talk about them.\n\n\n\n\nWIP: This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)\n\n\nAn brief history review, first:\n\n1960’s\n\nDuring the 1960’s there was the Imperative Paradigm where programs basically were composed of routines that interact with other small routines and shared the same Global Variables. The processing were really expensive and the focus were most about hardware capacity than in the solution itself.\n\nThis was the age of Cobol, Fortran and others Imperative Programing languages.\n\n1970’s\n\nIn this period of time we had a huge progress and now developers could use local variables without being worried about mess up the system by trusting in shared global variables.\n\nAlso the first scratch of what would become an “object” in the future was created, the Abstract Type or Structs.\n\nIn this time, programs started being divided in multiple files and C header file was introduced.\n\nThis was the age of Algol, C, Pascal and other programing languages that allowed developers to use Abstract Types and local variables.\n\nC Struct example:\n\nstruct Person\n{\n    char name[50];\n    int citNo;\n    float salary;\n};\n\n\n1980’s to now\n\nFinally the concept of object was applied to program languages and became possible split the problem and classes and methods and became easier to use business language in the code.\n\nAs examples of languages we can mention Java, C++, C# among many others object oriented languages.\n\nJava class example\n\n\npublic class Car\n{\n    private String brand;\n    private String model;\n\n    public Car(String brand, String model)\n    {\n        brand = brand;\n        model = model;\n    }\n\n    \n    public String getModel()\n    {\n        return model;\n    }\n\n    public void setModel(String model)\n    {\n        model = model;\n    }\n\n    public String getBrand()\n    {\n        return brand;\n    }\n\n    public void setBrand(String brand)\n    {\n        brand = brand;\n    }\n}\n\n\n1. Abstraction\n\nThe abstraction principle consists in “abstract” the general business needs into classes and methods without concert too much about details.\n\nAt this point the idea is not mature yet and the goal is to translate the initial problem to a high level code base.\n\n2. Decomposition\n\nAs we start digging we find more business needs we did not think before the problem becomes bigger and bigger.\n\nInstead of get crazy, we start breaking down (or decomposing) the previous classes in more and specialized ones. We create abstractions, interfaces, new entities are discovered and so on.\n\nThe goal here is to go deep in the details by decomposing the big problem in smaller and controlled solutions.\n\nTypes of Decomposition relations\n\nAssociation\n\n\n  Relationship is optional\n  Associated classes are completely independent.\n\n\n\n  \n  UML class diagram Association example\n\n\nAggregation\n\n\n  Weak has-a relationship.\n  One object does not need to have the other to exist.\n\n\n\n  \n  UML class diagram aggregation example\n\n\nComposition\n\n\n  Strong has-a relationship\n  Associated classes are completely dependent. Example, an object Human always has an object Brain associated, otherwise it cannot exist.\n\n\n\n  \n  UML class diagram composition example\n\n\n3. Encapsulation\n\nWhen decomposing the classes we start creating new methods and attributes that concern only for those classes. It is time to use inheritance, abstraction and access modifiers to to restrict for them.\n\nWe have some conventions for this like “getters” and “setter” methods, besides today they are controversial in some cases after the surge of Object Calisthenics.\n\n4. Generalization\n\nWhen a class inherits behavior or interface from a superior (super) class we call it Generalization. It can happen in two ways:\n\n\n  \n  UML class diagram Generalization example\n\n\nBy Abstraction\n\nAn abstract class (cannot be instantiated) has some methods (behavior) or properties that can be shared with the child classes.\n\nBy Interface\n\nAn interface (or Contract) is created, so the classes that implement this interface can entirely manage the internal implementation of the interface’s expected behavior.\n\nThen comes in place the Polymorphism.\n",
        "url": "/software-architecture/2019/09/06/object-modeling-principles/"
      },
    
      {
        "title": "Software Architecture Design Principles",
        "excerpt": "There are 4 important Design Principles to guide architects when modeling software. They are the CoSICi principles. I have invented this word to help me out memorize them! So far it is working and I would like to share it!\n\n",
        "content": "There are 4 important Design Principles to guide architects when modeling software. They are the CoSICi principles. I have invented this word to help me out memorize them! So far it is working and I would like to share it!\n\n\n\n\nWIP: This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)\n\n\n1. (Co) Coupling &amp; Cohesion\n\nBesides the different names, Coupling and Cohesion are intimately related, cause \nboth concern about software complexity.\n\nBefore explain each one, lets first define what is considered a module within this scope.\n\nModule can be a:\n\n\n  Software Component.\n  A Class\n  A Method of a Class\n  A Function\n\n\nCoupling\n\nCoupling represents the level of complexity involving multiple modules.\n\nCohesion\n\nCohesion represents the level of complexity inside a single module.\n\nAnd how to evaluate complexity?\n\nTo evaluate complexity we consider 3 important aspects: Degree, Easy, Flexibility:\n\nDegree\n\nThe Degree relates to the number of connections between modules. Are they tightly coupled\nto other modules?\n\nEasy\n\nThe Easy relates to how obvious are these connections. Do they follow a standard with meaningful names and purpose?\n\nFlexibility\n\nCan the module be used by others without refactoring? Does it have a generic interface that can be easily used by other modules without collateral effect?\n\n2. (S) Separation of Concerns\n\nA component, service, class or method should have a single, clear and meaningful purpose.\n\nHere comes handy the usage of SOLID principles, specially the (S) Single Responsibility.\n\nTips:\n\n\n  Relay on interfaces instead of concrete classes. When creating interfaces, you can better define the classes responsibility.\n  Use properties and methods access modifiers to restrict access.\n  Expose only necessary information on the APIs.\n  Avoid to appropriate data from other Domains to your application. Respect the Softwares Boundaries\n\n\n3. (I) Information Hiding\n\nA module should only expose necessary information for other components. This means that a module\nshould only know what he needs to know to fill his purpose and also only expose information that is necessary for other modules purposes.\n\nBe aware to use encapsulation and guard methods (i.e setter / constructors / getters) to receive and expose information in the correct ways.\n\n4. (CI) Conceptual Integrity\n\nI like to say the Conceptual Integrity is as good as the the alignment of business knowledge, technical expertise and process compliance that the individuals have.\n\nTips:\n\n\n  Follow a code standard.\n  Training and adjust knowledge levels of the individuals to be as similar as possible.\n  Do Code Reviews to reinforce the standards are being applied.\n  Have a well defined, accepted and execute SDLC (Software Development Life Cycle). Does not matter if you use Scrum, Kanban, water fall or whatever. If it is accepted and used by the individuals, this is what matters.\n\n\n",
        "url": "/software-architecture/2019/09/07/software-architecture-design-principles/"
      },
    
      {
        "title": "Model Checking, What it is and why to use it",
        "excerpt": "After finish the implementation of the so (or sometimes not) desired system, how do you know that it is (and behave) exactly as expected? Requirements change, people can forget, communications problems occur even in the best companies.\n\n",
        "content": "After finish the implementation of the so (or sometimes not) desired system, how do you know that it is (and behave) exactly as expected? Requirements change, people can forget, communications problems occur even in the best companies.\n\n\n\n\nWIP: This article is a working in progress. There could be some errors. I will also add some images to help the understanding :)\n\n\nWhat is Model Checking?\n\nModel checking is the technique to check if the behavior of the State Model of your system work as expected and notify any violation.\n\nWhat is a State Model?\n\nThe State Model is an abstract State Machine that can be in one or various states, so the Model checker can verify if the state mode conforms with expected behavior and properties.\n\nModeling phase\n\nDescribe all possible states and properties to be checked against your system.\n\nYou can use Unit Tests, BDD, etc. There are many tools out there to help you.\n\nRunning phase\n\nRun the necessary test of your State Machine against the expectations described on the previous phase.\n\nAnalysis phase\n\nCheck the results of the previous phase. If the State Model does not conforms with certain behavior or property we ha a Violation AKA Counterexamples.\n\nThe output of a Counterexample must show you exactly how to reproduce the violation, so you system can be fixed.\n\nWhen should I do a Model checking?\n\nAlways after implementation and before production deploy. It is untrue that a Software can be perfect during the planning or modeling phases. The beauty of software is that it can change many times before and after its implementation. Business needs flexibility, but we (developers) need to make sure it will work as expected after all those changes.\n",
        "url": "/software-architecture/2019/09/08/software-architecture-model-checking/"
      },
    
      {
        "title": "Emulate Android on Android Studio 3 using Mac OSX El Captain 10.11.6",
        "excerpt": "If you are having problems to emulate Android using Mac OSX El Captain 10.11.6, may this can help you.\n\n",
        "content": "If you are having problems to emulate Android using Mac OSX El Captain 10.11.6, may this can help you.\n\n\n\nIf when trying to run the emulation you got the following message:\n\nEmulator: Sorry, \"qemu-system-x86_64\" can not be run on this version of macOS. Qt requires macOS 10.12.0 or later, you have macOS 10.11.6.\n\n\nThe solution can be to downgrade your emulator version to Android Emulator Version 28.0.25.\n\nAfter download you should replace your current emulator with this one. The emulator for Android Studio generally is located on:\n\n/Users/{YOUR_USERNAME}/Library/Android/sdk/emulator\n\n\nSo you can just replace the files and restart your Android studio.\n",
        "url": "/android/macos/2019/09/10/android-emulator-does-not-work-macos-el-captain-10-11-6/"
      },
    
      {
        "title": "A brief overview about Software Design and Software architecture",
        "excerpt": "What is Software Design and Architecture? How they relate and differ each other?\n\n",
        "content": "What is Software Design and Architecture? How they relate and differ each other?\n\n\n\nTo try to understand Software Design/Architecture, we can do an analogy using a project of a house, for example:\n\nSoftware Architecture\n\nAs an architect, you would have high level concerns, such as:\n\n\n  How many people does it needs to support?\n  How many rooms does it have?\n  How are they connected / accessible?\n  What would be the best house position, angle, size?\n  What is the region where the house is located?\n  What materials should I use?\n\n\nThese are higher level questions and show interactions of many “components” on a wide scope.\n\nSo during the architecture we need to know:\n\n\n  The big picture of the problem we need to solve.\n  What are the possible solutions.\n  Define how the “overall” solution would look like.\n  Raise the Necessary requirements for an stable and long living solution.\n  Define the quality tradeoffs.\n\n\nWhat is a quality trade-off?\n\nA tradeoff happens when to make an improvement you must sacrifice some other quality, for example: Adding security layer even if it costs some performance, makes the application safer.\n\nWhat are important skills for a Software Architect?\n\n\n  Tech Skills: Having good years of experience programing with different languages, databases, frameworks, solving problems in different scales, etc are mandatory.\n    \n      Design patterns.\n      Code standards.\n      Distributed processing.\n      Network.\n      Event Oriented and Object Oriented Programing.\n      …Any other Technology close to your professional scope. Example: An architect for mobile apps, must know cloud computing, mobile programing (i.e. Java), UI and so on.\n    \n  \n  \n    Business knowledge: An architect must be close to the business in order to clearly understand their needs and find the better approach to create a successful solution.\n  \n  \n    Organizational skills: Handle multiple concerns: Security, Performance, Business requirements, technical limitations, deadlines, etc.\n  \n  \n    Soft skills: It’s true that we use computers to create our applications, but we actually work with people for people. It’s important to maintain good relationship with colleagues from the team and other departments. Make the work environment pleasant and collaborative. Happy people produce more and do not get sick so often.\n  \n  Know what is available: Do not get stuck on your technologies and ideas. Always try to find out what is happening in the market, which technologies are available, what can you use? I mean, you do not need to know everything in details, but it comes handy when you have a problem to solve and plenty of alternatives to nail it.\n\n\nSoftware Design\n\nStill considering the house project as example, the “Design” involves a low level scope, which means, we can can go on details for a given component.\n\nConsidering we need to build the kitchen, now the questions are:\n\n\n  How would the person interact with the kitchen?\n  How many sinks and which sizes we would need?\n  For plumbing, which pipes should we use, and in which disposition?\n  What will be the best material for this type of kitchen?\n  How would be better electrical wires connections to use, and how many plugs and sockets?\n\n\nWhen we enter in “implementation” details of a “component” we are talking about the design.\n\nBut what are the Stages of the Software Design?\n\nStage 1: Conceptual Design\n\nThis part is closer to the software behavior and functional validation.\n\n\n  Concept validation: Collect and validate customer requirements.\n  Conceptual mockups: Create mockups to help you visualize your problems in the earlier stage.\n  Validate mockups: Show, validate and adapt your mockups with the customers.\n  Create the CRC cards: Class Responsibility Collaborator cards will help you identify classes and components in your system and how they interact each other.\n  Reveal “hidden” questions: During the previous steps, many questions might come to you. Bring them to the customer, before moving forward.\n\n\nWhat is CRC (Class Responsibility Collaborator)?\n\nThis technique helps you see the relations between classes or components.\n\n\n  Class or Component: The class or components that interact with other class or components.\n  Responsibilities: The responsibilities of this component.\n  Collaborators: Components this component interacts with.\n\n\nStage 2: Technical Design\n\nThis part is closer to the software implementation.\n\n\n  Go into details: Turn the conceptual design into a more precise design, for example, start the UML class diagram.\n  Programing Define code structure and turn mockups into classes and then an application.\n\n\nCategories of objects\n\nDuring the technical design, many types of objects will be evidenced:\n\n\n  Entity Objects: Real world entities that know their rules and attributes. Example: Customer.\n  Boundary objects: Objects responsible to collect / send information to other systems. Example: Gateway, ContactForm.\n  Control objects: Objects that control other objects. Example: “Mediator”.\n\n\n",
        "url": "/software-architecture/2019/09/11/software-design-architecuture/"
      },
    
      {
        "title": "The 23 Design Patterns you must know",
        "excerpt": "Based on a famous book I will try to simplify and give examples of the \n23 famous design patterns that can help your daily work as developer.\n\n",
        "content": "Based on a famous book I will try to simplify and give examples of the \n23 famous design patterns that can help your daily work as developer.\n\n\n\nIf you do not know the book I am talking about, it is Design Patterns: Elements of Reusable Object-Oriented Software.\nEven nowadays the Book is still handy and we realize how timeless is its content.\n\nBefore we start\n\nSo what are Design Patterns?\n\nYes, Design Patterns are everywhere we need to do a recurring action.\n\nBesides construction, medicine, engineering, we have patterns also for teaching people, cooking (recipes), social interactions (greet, thanks, apologize), selling, designing packings and many many others areas.\n\nBasically, for any repeating task, by experience, the specialists found approaches that work better on each situation and then it becomes a pattern.\n\nAlong the history developers have solved similar problems with different solutions. It turned out that to solve common problems, some solutions provided a better result and made the code more ReFlexMain, which is Reusable, Flexible and Maintainable, the holy trinity.\n\nAs an Architect, Software Engineer or Developer, Design patterns will give to you the Foundation to solve more complex design problems.\n\nLets explore them!\n\nCreational Patterns\n\nDefine patterns to be used when creating or cloning objects.\n\nSingleton\n\nSingleton actually became an anti-patterns, because it brings many restrictions due the fact is is a single instance of an object, thus a global state in the whole application. It makes system more complex and hard to test.\n\nFor a matter of information, I will show the pattern here just for you to don not use it.\n\nGoals of the pattern:\n\n\n  Object must be globally accessible.\n  There must a single instance of an object for the whole application.\n\n\nBasically we make impossible to create an instance externally by making a private constructor and then we create a public static method to cache and retrieve the single global state of this class.\n\nExample in PHP:\n\n&lt;?php\nclass Singleton\n{\n    private $instance;\n\n    private function __construct(){}\n\n    public static function getInstance(): Singleton \n    {\n        if (null === $this-&gt;instance) {\n            $this-&gt;instance = new self();\n        }\n\n        return $this-&gt;instance;\n    }\n}\n\n\nStructural Patterns\n\nThese patterns describe how objects are connected to each other:\n\n\n  How they relate with generalization: Composition, Association, Aggregation, Inheritance or Interface\n  How classes and subclasses interact trough inheritance.\n\n\nBehavioral Patterns\n\nDefine how independent object work towards a common goal.\n\n",
        "url": "/software-architecture/design-patterns/2019/09/12/the-23-design-patterns-you-must-know/"
      },
    
  
  
  
  {
    "title": "Categories",
    "excerpt": "Select a category\n",
    "content": "\n",
    "url": "/categories/"
  },
  
  {
    "title": "Gabriel's Blog",
    "excerpt": "…\n",
    "content": "Hello,\n\nMy name is Gabriel and I am a Software Developer based in Luxembourg. Here is a place to share my thoughts and what I have learned in my professional life.\n",
    "url": "/"
  },
  
  {
    "title": "Search",
    "excerpt": "Search for a page or post you’re looking for\n",
    "content": "{% include site-search.html %}\n",
    "url": "/search/"
  }
  
]

